###########
# BUILDER #
###########

# using python official base image
FROM python:3.11.1-alpine AS builder-image

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add postgresql-dev gcc python3-dev musl-dev \
    && apk del build-deps \
    && apk --no-cache add musl-dev linux-headers g++

# create and activate virtual environment
# using final folder name to avoid path issues with packages
RUN python3 -m venv /usr/src/app/venv
ENV PATH="/usr/src/app/venv/bin:$PATH"

# lint
RUN pip3 install --upgrade pip
RUN pip3 install flake8==3.9.2
COPY . .
RUN flake8 --ignore=E501,F401 .

# install requirements
COPY ./requirements.txt .
RUN pip3 wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt
RUN pip3 install --no-cache /usr/src/app/wheels/*

#########
# FINAL #
#########

FROM python:3.11.1-alpine AS runner-image

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create directory for the app user
RUN mkdir -p /home/app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder-image /usr/src/app/venv $HOME/venv

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# activate virtual environment
ENV VIRTUAL_ENV=$HOME/venv
ENV PATH="$HOME/venv/bin:$PATH"

ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]